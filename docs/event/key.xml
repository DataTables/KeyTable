<?xml version="1.0" encoding="UTF-8" ?>
<dt-event library="KeyTable">
	<name>key</name>
	<summary>A key event has been detected on the table and is _not_ handled by KeyTable</summary>
	<since>2.0.0</since>

	<type type="function">
		<signature>function( e, datatable, key, cell, originalEvent )</signature>
		<parameter type="object" name="e">
			jQuery event object
		</parameter>
		<parameter type="DataTables.Api" name="datatable">
			DataTable API instance for the table in question
		</parameter>
		<parameter type="integer" name="key">
			The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode) for the pressed key
		</parameter>
		<parameter type="DataTables.Api" name="cell">
			A DataTables API instance that contains the cell that has focus (`dt-api cell()`)
		</parameter>
		<parameter type="object" name="originalEvent">
			The original key event that triggered this event
		</parameter>
		<scope>HTML table element</scope>
	</type>

	<description>
		This event is triggered by KeyTable when a key is pressed by the end user and the following conditions are met:

		* KeyTable is enabled (`kt-api keys.enable()` and `kt-api keys.disable()`)
		* A cell in the DataTable has focus
		* KeyTable does not handle the key event itself (for example an arrow key will trigger a focus change and this event will not be triggered).

		This event is triggered from a `keydown` event that KeyTable itself listens for. The original event is passed in as the fourth parameter to the event handlers allowing the `preventDefault` and `stopPropagation` methods of the event being triggered, which can be useful if you wish to trigger some action such as editing the content of the cell.
	</description>

	<example title="Trigger inline editing with Editor when the enter key is pressed. Note that the `kt-init keys.editor` option can be used to provide a similar interface."><![CDATA[
var table = new DataTable('#myTable', {
	keys: true
});

table.on('key', function (e, datatable, key, cell, originalEvent) {
	if (key === 13) {
		// return
		// timeout needed to let inline initialise
		setTimeout(function () {
			editor
				.one('close', function () {
					table.keys.enable();
				})
				.inline(cell.node());
		}, 100);

		table.keys.disable();
	}
});
]]></example>

	<related>kt-api keys.enable()</related>
	<related>kt-api keys.disable()</related>
	<related>kt-api cell().focus()</related>
</dt-event>
